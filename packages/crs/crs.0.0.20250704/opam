opam-version: "2.0"
synopsis: "A tool for managing code review comments embedded in source code"
maintainer: ["Mathieu Barbin <opensource@mbarbin.org>"]
authors: ["Mathieu Barbin"]
license: "LGPL-3.0-or-later WITH LGPL-3.0-linking-exception"
homepage: "https://github.com/mbarbin/crs"
doc: "https://mbarbin.github.io/crs/"
bug-reports: "https://github.com/mbarbin/crs/issues"
depends: [
  "dune" {>= "3.17"}
  "ocaml" {>= "5.2" & < "5.4~"}
  "ocamlformat" {with-test & = "0.27.0"}
  "base" {>= "v0.17"}
  "cmdlang" {>= "0.0.9"}
  "file-rewriter" {>= "0.0.3"}
  "fpath" {>= "0.7.3"}
  "fpath-base" {>= "0.3.1"}
  "loc" {>= "0.2.2"}
  "ocaml-protoc" {with-test & >= "3.1"}
  "pageantty" {>= "0.0.2"}
  "pbrt" {>= "3.1"}
  "pbrt_yojson" {>= "3.1"}
  "pp" {>= "2.0.0"}
  "pplumbing" {>= "0.0.14"}
  "ppx_compare" {>= "v0.17"}
  "ppx_enumerate" {>= "v0.17"}
  "ppx_hash" {>= "v0.17"}
  "ppx_here" {>= "v0.17"}
  "ppx_sexp_conv" {>= "v0.17"}
  "ppx_sexp_value" {>= "v0.17"}
  "ppx_yojson_conv" {>= "v0.17"}
  "ppxlib" {>= "0.33"}
  "printbox" {>= "0.12"}
  "printbox-md" {>= "0.12"}
  "printbox-text" {>= "0.12"}
  "re" {>= "1.12.0"}
  "spawn" {>= "v0.17"}
  "stdio" {>= "v0.17"}
  "volgo" {>= "0.0.18"}
  "volgo-base" {>= "0.0.18"}
  "volgo-git-unix" {>= "0.0.18"}
  "volgo-hg-unix" {>= "0.0.18"}
  "yojson" {>= "2.1.1"}
  "yojson-five" {>= "2.1.1"}
  "odoc" {with-doc}
]
build: [
  ["dune" "subst"] {dev}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
]
dev-repo: "git+https://github.com/mbarbin/crs.git"
description: """\

The [crs] package provides libraries and a CLI to help manage code
review comments embedded directly in source code using a specialized
syntax.

With [crs] you can locate, parse, and manipulate these comments
easily, and perform tasks such as systematically updating comments
across multiple files, changing their priority, marking them as
resolved, modifying reporter or assignee information, and more.

This tool can be used during development or integrated into your CI
pipeline. For example, you can use [crs] to ensure no unresolved
comments remain before merging a pull request or releasing a new
version of your software.

Beyond its standalone functionality, [crs] is intended to serve as a
sharable building block for more comprehensive code review systems and
collaborative workflows.

The [crs] projects builds upon ideas from [iron], a code review system
built by Jane Street and released as open source in 2016-2017. We
deeply appreciate Jane Streetâ€™s willingness to share [iron], which has
provided a valuable starting point for exploring and advancing these
ideas.

[iron]: https://github.com/janestreet/iron

"""
tags: [ "code-review" ]
x-maintenance-intent: [ "(latest)" ]
url {
  src:
    "https://github.com/mbarbin/crs/releases/download/0.0.20250704/crs-0.0.20250704.tbz"
  checksum: [
    "sha256=a04bdbe2ec750f1fe8b2f35b304d5eb928481211940e0912304f3832026b66d5"
    "sha512=d4b356b065cba106699d5a00614b53ed487374c8e3472a51a3d619883390f161df7e3a58b859860903b104e90398959ddd82abc86c6c1de46588451fe024414a"
  ]
}
x-commit-hash: "8e9cd68f89c75d41e6f54cbcab2b4d3ac6fe2797"
